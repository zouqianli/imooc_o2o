<?php
namespace app\admin\controller;
use think\Controller;

class Category extends Controller
{
    /**
     * @var 属性,方便所有方法调用
     */
    private $category;

    /**
     * 初始化分类模型,赋值给属性$category
     */
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->category = model("Category");
    }

    /**
     * 分类列表
     * @return mixed返回一级分类列表
     */
    public function index()
    {
        // 获取parentID,默认值0,整型
        $parentID = input('get.parent_id',0,'intval');
        // 根据parentID获取未删除(正常,待审)分类,传递给模板
        $categorys = $this->category->getFirstCategory($parentID);
        return $this->fetch('',[
            'categorys'=>$categorys,
        ]);
    }

    /**
     * 分类添加模板
     * @return mixed
     */
    public function add()
    {
        // 模型获取正常一级分类,传给模板
        $categorys = $this->category->getNormalFirstCategory();
        return $this->fetch('',[
            'categorys' => $categorys,
        ]);
    }

    /**
     * 获取分类数据,验证(场景)分类数据,保存到数据库
     */
    public function save()
    {
        // 严格判断:不是post请求,给出错误提示
        if(!request()->isPost())
        {
            $this->error('请求失败');
        }
        $data = input('post.');
//        3. 场景设置 中的add--指定字段数据会被验证,忽略其他数据
        $validate = validate('Category');
        if(!$validate->scene('add')->check($data))
        {
            $this->error($validate->getError());
        }
        // 有id,进行更新操作
        if(!empty($data['id']))
        {
            return $this->update($data);
        }

//      4. 提交$data到model层,添加分类
        $res = $this->category->add($data);
        if($res)
        {
            $this->success('新增分类成功');
        }
        else
        {
            $this->error('新增分类失败');
        }
    }

    /**
     * 根据id,parentID更新分类信息
     * @param int $id 分类id
     * @param int $parentID 分类父级id
     * @return mixed 传递参数给模板
     */
    public function edit($id=0, $parentID=0)
    {
        //1. 判断编辑时传递的参数id(对应分类表中为主键),默认0
        if($id<1)
        {
            $this->error('参数不合法');
        }
        //2. 根据id获取要编辑的分类信息,传递给模板
        $category = $this->category->get($id);

        //2.1 调试编辑 分类信息为app\common\model\Category Object(...)对象
        //print_r($category);exit;

        //3. 根据parentID获取未删除(正常,待审)分类,传递给模板
        $categorys = $this->category->getFirstCategory($parentID);

        //4. 传递数据给模板
        return $this->fetch('',[
            'category'  =>  $category,
            'categorys' =>  $categorys,
        ]);
    }

    /**
     * 更新分类信息
     * @param $data更新数据
     */
    public function update($data)
    {
        // 使用model层的save()方法,根据隐藏域id更新数据
        $res = $this->category->save($data,intval(['id'=>$data['id']]));
        if($res)
        {
            $this->success('更新分类成功');
        }
        else
        {
            $this->error('更新分类失败');
        }
    }

    /**
     * 排序功能
     * @param $id分类id
     * @param $listorder分类父级id
     */
    public function listorder($id, $listorder)
    {
        // 调用上面的保存(更新)方法 更新数据库--排序值
        $res = $this->category->save(['listorder'=>$listorder], ['id'=>$id]);
        if($res)
        {
            // result方法返回data数据--准备跳转的地址,code状态码,msg消息
            $this->result($_SERVER['HTTP_REFERER'],1,'更新排序成功');
        }
        else
        {
            $this->result($_SERVER['HTTPREFERER'],0,'更新排序失败');
        }
    }

    public function status()
    {
        //测试获取数据
        //print_r(input('get.'));
        // get获取数据
        $data = input('get.');
        // 场景验证 id status
        $validate = validate('Category');
        if(!$validate->scene('status')->check($data))
        {
            $this->error($validate->getError());
        }
        // 调用上面的保存(更新)方法 更新数据库--状态
        $res = $this->category->save(['status'=>$data['status']], ['id'=>$data['id']]);
        if($res)
        {
            $this->success('更新状态成功');
        }
        else
        {
            $this->error('更新状态失败');
        }


    }
}

